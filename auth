const userdata = require("../model/data.model");
const bcrypt = require("bcrypt");
const dotenv = require("dotenv");
dotenv.config();
const jwt = require("jsonwebtoken");
const { generateOTP } = require("../../../middleware/commonfunc");

const auth = {};

const dir = "./uploads/profileImg";
const multer = require("multer");
const fs = require("fs");

const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, dir);
  },
  filename: function (req, file, cb) {
    cb(null, file.originalname);
  },
});

const upload = multer({ storage: storage }).fields([{ name: "profileImg" }]);

const accountSid = "ACc7d4fe258f61be568c7fad4a5293da7d";
const authToken = "b3f7938f16ea1fa45f2df2b6c4612609";
const client = require("twilio")(accountSid, authToken);

auth.signup = async (req, res) => {
  try {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, {
        recursive: true,
      });
    }

    upload(req, res, async (err) => {
      if (err) {
        console.error("Upload Error", err);
        return res.status(500).json({
          success: false,
          message: "Internal Server Error",
        });
      }

      const data = req.body;
      const isExist = await userdata.findOne({ email: data.email });

      if (isExist) {
        return res.status(400).json({
          success: false,
          message: "An account with this email already exists. Please login",
        });
      } else {
        if (req.files && req.files.profileImg) {
          const img = req.files.profileImg[0].path;
          data.profileImg = img;
        }

        const hashedpassword = await bcrypt.hash(
          data.password,
          parseInt(process.env.SALT_ROUND)
        );
        data.password = hashedpassword;

        const otp = generateOTP(4);
        data.otp = otp;

        const newData = new userdata(data);
        const saveData = await newData.save();

        if (saveData) {
          try {
            // await client.messages.create({
            //     body: `otp for your name ${otp}`,
            //     to: saveData.mobile,
            //     from: '13344630087',
            // });

            return res.status(200).json({
              success: true,
              message: "Account created successfully!",
              data: saveData,
            });
          } catch (twilioError) {
            console.error("Twilio Error", twilioError);
            return res.status(500).json({
              success: false,
              message: "Error sending OTP via Twilio",
            });
          }
        }
      }
    });
  } catch (error) {
    console.error("Signup Error", error);
    return res.status(500).json({
      success: false,
      message: "Internal Server Error",
    });
  }
};

auth.login = async (req, res) => {
  try {
    const data = req.body;
    const user = await userdata.findOne({ email: data.email });

    if (!user) {
      return res.status(401).json({
        success: false,
        message: "Invalid email or password",
      });
    }

    const isPasswordValid = await bcrypt.compare(data.password, user.password);

    if (!isPasswordValid) {
      return res.status(401).json({
        success: false,
        message: "Invalid email or password",
      });
    } else {
      const payload = {
        id: user._id,
        email: user.email,
      };
      const token = await jwt.sign(payload, process.env.JWT_SECRET);

      return res.status(200).json({
        success: true,
        message: "Login successful!",
        data: user,
        token: token,
      });
    }
  } catch (error) {
    console.error(error);
    return res.status(500).json({
      success: false,
      message: "Internal Server Error",
      error: error.message,
    });
  }
};

auth.allrecords = async (req, res) => {
  try {
    const allrecords = await userdata.find();
    if (!allrecords || allrecords.length === 0) {
      return res.status(404).json({
        success: false,
        message: "Records not found",
      });
    } else {
      return res.status(200).json({
        success: true,
        message: "Records found",
        data: allrecords,
      });
    }
  } catch (error) {
    console.error(error);
    return res.status(500).json({
      success: false,
      message: "Internal Server Error",
      error: error.message,
    });
  }
};
//quer params
auth.singledata = async (req, res) => {
  try {
    const singledata = await userdata.findById(req.query.id);
    if (!singledata) {
      return res.status(404).json({
        success: false,
        message: "Record not found",
      });
    } else {
      return res.status(200).json({
        success: true,
        message: "Record found",
        data: singledata,
      });
    }
  } catch (error) {
    return res.status(500).json({
      success: false,
      message: "Internal Server Error",
    });
  }
};

//request params
auth.paramsingle = async (req, res) => {
  try {
    const paramsi = await userdata.findById(req.query.id);
    if (!paramsi) {
      return res.status(404).json({
        success: false,
        message: "Record not found",
      });
    } else {
      return res.status(200).json({
        success: true,
        message: "Record found",
        data: paramsi,
      });
    }
  } catch (error) {
    return res.status(500).json({
      success: false,
      message: "Internal Server Error",
      error: error.message,
    });
  }
};

auth.forgotPassword = async (req, res) => {
  try {
    const data = req.body;
    const user = await userdata.findOne({ email: data.email });
    //  db email    user email
    if (!user) {
      return res.status(404).json({
        success: false,
        message: "User not found",
      });
    }

    const otp = generateOTP(4);

    const updateUser = await userdata.findOneAndUpdate(
      { email: data.email },
      { otp: otp },
      { new: true }
    );

    await client.messages.create({
      body: `Your OTP for password reset is: ${otp}`,
      to: user.mobile,
      from: "13344630087",
    });

    return res.status(200).json({
      success: true,
      message: "OTP for password reset sent successfully",
      data: {
        user: updateUser,
      },
    });
  } catch (error) {
    console.error("Error:", error);
    return res.status(500).json({
      success: false,
      message: "Server error",
      error: error.message,
    });
  }
};

auth.verifyOtp = async (req, res) => {
  try {
    const data = req.body;
    console.log("data:>>", data);
    const user = await userdata.findOne({ email: data.email });
    if (data.otp == user.otp) {
      payload = {
        id: user._id,
        email: user.email,
      };

      const token = jwt.sign(payload, process.env.JWT_SECRET, {
        expiresIn: "1h",
      });
      return res.status(200).json({
        success: true,
        message: "otp verified",
        token: token,
      });
    } else {
      return res.status(400).json({
        success: false,
        message: "invalid otp",
      });
    }
  } catch (error) {
    return res.status(500).json({
      success: false,
      message: "internal server error",
    });
  }
};

auth.restorePassword = async (req, res) => {
  try {
    const data = req.body;

    if (!req.user || !req.user.id) {
      return res.status(401).json({
        success: false,
        message: "Unauthorized: User not authenticated or missing user id",
      });
    }

    const hashedPassword = await bcrypt.hash(data.password, 10);
    data.password = hashedPassword;

    const restore = await userdata.findByIdAndUpdate(
      { _id: req.user.id },
      data,
      { new: true }
    );

    if (restore) {
      return res.status(200).json({
        success: true,
        message: "Password restored successfully",
        data: restore,
      });
    } else {
      return res.status(500).json({
        success: false,
        message: "Failed to restore password",
      });
    }
  } catch (error) {
    console.error("restore password", error);
    return res.status(500).json({
      success: false,
      message: "Internal Server Error",
      error: error.message,
    });
  }
};

auth.changePassword = async (req, res) => {
  try {
    const data = req.body;
    const user = await userdata.findById({ _id: req.user.id });
    const passwordMatch = await bcrypt.compare(data.oldPassword, user.password);

    if (!passwordMatch) {
      return res.status(400).json({
        success: false,
        message: "old password is incorrect",
      });
    } else {
      const passwordMatch = await bcrypt.compare(
        data.newPassword,
        user.password
      );
      if (passwordMatch) {
        return res.status(400).json({
          success: false,
          message: "password can't be the old password",
        });
      }
      const hashedPassword = await bcrypt.hash(data.newPassword, 10);
      data.password = hashedPassword;

      const updateduser = await userdata.findByIdAndUpdate(
        {
          _id: req.user.id,
        },
        data,
        { new: true }
      );
      res.status(200).json({
        success: true,
        message: "password changed successfully",
        data: updateduser,
      });
    }
  } catch (err) {
    console.log("err:>>", err);
    return res.status(500).json({
      message: false,
      message: "internal server error",
    });
  }
};

auth.allrecords2 = async (req, res) => {
  try {
    const pageNo = parseInt(req.query.pageNo) || 1;
    const pageLimit = parseInt(req.query.pageLimit) || 10;

    const allrecords = await userdata
      .find()
      .skip(pageLimit * (pageNo - 1))
      .limit(pageLimit);

    return res.status(200).json({
      success: true,
      message: "Records found",
      data: allrecords,
      page: pageNo,
      pageLimit: pageLimit,
    });
  } catch (error) {
    console.error(error);
    return res.status(500).json({
      success: false,
      message: "Internal Server Error",
      error: error.message,
    });
  }
};

auth.allrecords3 = async (req, res) => {
  try {


    let searchFilter = {};
    if (req.query.search && req.query.search !== "undefined") {
      searchFilter = {
        $or: [
          {
            username: {
              $regex: req.query.search ? req.query.search : "",
              $options: "i",
            },
          },
          {
            email: {
              $regex: req.query.search ? req.query.search : "",
              $options: "i",
            },
          },
        ],
      };
    }

    const allrecords3 = await userdata.find(searchFilter);
    return res.status(200).json({
      success: true,
      message: "Records found",
      data: allrecords3,
      
    });
  } catch (error) {
    console.error(error);
    return res.status(500).json({
      success: false,
      message: "Internal Server Error",
      error: error.message,
    });
  }
};
auth.updateUserState = async (req, res) => {
  try {
    let filterState = {};
    let resp;
    switch (req.query.state) {
      case "1":
        filterState = { State: 1 };
        resp = "user state active";
        break;
      case "2":
        filterState = { State: 2 };
        resp = "user state inactive";
        break;
      case "3":
        filterState = { State: 3 };
        resp = "user state deleted";
        break;
      default:
        break;
    }
    console.log("filter:>>", filterState);

    const updateduser = await userdata.findByIdAndUpdate(
      {
        _id: req.params.id,
      },
      filterState,
      { new: true }
    );
    return res.status(200).json({
      success: true,
      message: resp,
      data: updateduser,
    });
  } catch (err) {
    console.log("err:>>", err);
    return res.status(500).json({
      message: false,
      message: "internal server error",
    });
  }
};

module.exports = auth;
// const Auth1Model = require('../model/data1.model');

// exports.createUser = async (req, res) => {
//   try {
//     const { email } = req.body;

    
//     const existingUser = await Auth1Model.findOne({ email });

//     if (existingUser) {
//       return res.status(400).json({ error: 'Account already exists with this email. Please log in instead.' });
//     }

//     const hashedPassword = await bcrypt.hash(password, 10);

//      req.body.password = hashedPassword;
   
//     const newUser = new Auth1Model(req.body);
//     const savedUser = await newUser.save();

//     res.status(201).json(savedUser);
//   } catch (error) {
//     console.error('Error creating user:', error);
//     res.status(500).json({ error: 'Internal Server Error' });
//   }
// };


// exports.getAllUsers = async (req, res) => {
//   try {
//     const users = await Auth1Model.find();
//     res.status(200).json(users);
//   } catch (error) {
//     console.error('Error fetching users:', error);
//     res.status(500).json({ error: 'Internal Server Error' });
//   }
// };


// exports.getUserById = async (req, res) => {
//   try {
//     const user = await Auth1Model.findById(req.params.id);

//     if (!user) {
//       return res.status(404).json({ error: 'User not found' });
//     }

//     res.status(200).json(user);
//   } catch (error) {
//     console.error('Error fetching user by ID:', error);
//     res.status(500).json({ error: 'Internal Server Error' });
//   }
// };


// exports.updateUserById = async (req, res) => {
//   try {
//     const updatedUser = await Auth1Model.findByIdAndUpdate(
//       req.params.id,
//        req.body,
//         { new: true });

//     if (!updatedUser) {
//       return res.status(404).json({ error: 'User not found' });
//     }

//     res.status(200).json(updatedUser);
//   } catch (error) {
//     console.error('Error updating user by ID:', error);
//     res.status(500).json({ error: 'Internal Server Error' });
//   }
// };


// exports.deleteUserById = async (req, res) => {
//   try {
//     const deletedUser = await Auth1Model.findByIdAndDelete(req.params.id);

//     if (!deletedUser) {
//       return res.status(404).json({ error: 'User not found' });
//     }

//     res.status(200).json(deletedUser);
//   } catch (error) {
//     console.error('Error deleting user by ID:', error);
//     res.status(500).json({ error: 'Internal Server Error' });
//   }
// };
